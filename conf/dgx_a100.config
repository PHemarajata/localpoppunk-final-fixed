/*
* Configuration optimized for NVIDIA DGX Station A100
* Hardware: 128 cores, 512GB RAM
* Focus: Bus error and segfault prevention with maximum performance
*/

params {
    // Conservative resource allocation with overhead for system stability
    threads = 96                     // Use 75% of cores (128 * 0.75) leaving room for system
    ram = '400 GB'                  // Use ~78% of RAM (512GB * 0.78) with overhead
    
    // Chunked processing optimized for DGX A100
    threads_per_chunk = 12          // Moderate threading per chunk
    memory_per_chunk = '32 GB'      // Allow up to 12 chunks in parallel (12 * 32GB = 384GB)
    
    // PopPUNK stability settings - CRITICAL for preventing segfaults
    poppunk_stable = false          // NEVER enable - causes segfaults with large datasets
    poppunk_reciprocal = true       // Better lineage fitting
    poppunk_count_unique = true     // Accuracy improvement
    poppunk_max_search = 20         // Increased for better clustering (DGX can handle it)
    poppunk_K = 6                   // More mixture components for better separation
    poppunk_model_threads = 32      // Moderate threading for model building
    
    // Enhanced k-mer parameters for high-resolution clustering
    poppunk_min_k = 15
    poppunk_max_k = 31
    poppunk_k_step = 2
    poppunk_sketch_size = 200000    // Larger sketch for DGX performance
    poppunk_max_a_dist = 0.50       // Optimized accessory distance
    poppunk_run_qc = true
    
    // Model refinement for recombination handling
    poppunk_enable_refinement = true
    poppunk_refine_both = true
    poppunk_refine_core_only = false
    poppunk_refine_accessory_only = false
    
    // MASH optimization for DGX performance
    mash_k = 21
    mash_s = 200000                 // Large sketch size for high-memory system
    mash_thresh = 0.001
}

process {
    executor = 'local'
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Default resource allocation
    cpus = 16
    memory = '64 GB'
    time = '12h'
    
    // Process-specific optimizations for bus error prevention
    withName: 'VALIDATE_FASTA' {
        cpus = 8
        memory = '16 GB'
        time = '2h'
        maxForks = 8                // Parallel validation
    }
    
    withName: 'MASH_SKETCH' {
        cpus = 24                   // High parallelization for sketching
        memory = '48 GB'
        time = '4h'
        maxForks = 4                // Allow multiple sketch processes
    }
    
    withName: 'MASH_DIST' {
        cpus = 32                   // Distance calculation benefits from more cores
        memory = '96 GB'            // Large memory for distance matrix
        time = '8h'
        maxForks = 2                // Limit to prevent memory contention
    }
    
    withName: 'BIN_SUBSAMPLE' {
        cpus = 16
        memory = '32 GB'
        time = '2h'
    }
    
    withName: 'POPPUNK_MODEL' {
        cpus = 32                   // CRITICAL: Conservative cores to prevent bus errors
        memory = '128 GB'           // Large memory for model building
        time = '24h'                // Extended time for stability
        errorStrategy = 'retry'
        maxRetries = 3
        // Memory management to prevent bus errors
        clusterOptions = '--mem-per-cpu=4G'
    }
    
    withName: 'POPPUNK_REFINE' {
        cpus = 24                   // Conservative cores for refinement
        memory = '96 GB'            // Large memory for refinement
        time = '12h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'POPPUNK_ASSIGN_CHUNK' {
        cpus = 12                   // Conservative per-chunk processing
        memory = '32 GB'            // Moderate memory per chunk
        time = '8h'
        maxForks = 10               // Allow up to 10 parallel chunks (10 * 32GB = 320GB)
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'MERGE_CHUNK_RESULTS' {
        cpus = 8
        memory = '24 GB'
        time = '2h'
    }
    
    withName: 'SUMMARY_REPORT' {
        cpus = 4
        memory = '16 GB'
        time = '1h'
    }
}

// Enhanced monitoring and reporting for DGX system
report {
    enabled = true
    file = "${params.resultsDir}/reports/dgx_a100_execution_report.html"
}

timeline {
    enabled = true
    file = "${params.resultsDir}/reports/dgx_a100_timeline.html"
}

dag {
    enabled = true
    file = "${params.resultsDir}/reports/dgx_a100_dag.svg"
}

// CORRECTED trace configuration with valid field names only
trace {
    enabled = true
    file = "${params.resultsDir}/reports/dgx_a100_trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,cpus,time,memory,attempt,submit,start,complete,duration,realtime,%cpu,%mem,peak_rss,peak_vmem'
}

// Docker optimization for DGX
docker {
    enabled = true
    runOptions = '--shm-size=8g --ulimit memlock=-1 --ulimit stack=67108864'
    temp = 'auto'
}

// Memory and performance tuning
env {
    // Java heap size optimization
    NXF_OPTS = '-Xms8g -Xmx32g'
    // Prevent memory fragmentation
    MALLOC_ARENA_MAX = '4'
    // Optimize for large datasets
    OMP_NUM_THREADS = '1'
}